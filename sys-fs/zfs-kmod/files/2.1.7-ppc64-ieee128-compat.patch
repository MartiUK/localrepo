
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
From 8324d738fdb3096bd97336476bb399e6c312289a Mon Sep 17 00:00:00 2001
From: Richard Yao <richard.yao@alumni.stonybrook.edu>
Date: Thu, 12 Jan 2023 11:06:57 -0500
Subject: [PATCH] Linux ppc64le ieee128 compat: Do not redefine __asm on
 external headers

There is an external assembly declaration extension in GNU C that glibc
uses when building with ieee128 floating point support on ppc64le.
Marking that as volatile makes no sense, so the build breaks.

It does not make sense to only mark this as volatile on Linux, since if
do not want the compiler reordering things on Linux, we do not want the
compiler reordering things on any other platform, so we stop treating
Linux specially and just manually inline the CPP macro so that we can
eliminate it. This should fix the build on ppc64le.

Closes openzfs/zfs#14308
Signed-off-by: Richard Yao <richard.yao@alumni.stonybrook.edu>
---
 .../vdev_raidz_math_powerpc_altivec_common.h  | 44 +++++++++----------
 1 file changed, 20 insertions(+), 24 deletions(-)

diff --git a/module/zfs/vdev_raidz_math_powerpc_altivec_common.h b/module/zfs/vdev_raidz_math_powerpc_altivec_common.h
index 46d42c5e241..f76eb47a9c6 100644
--- a/module/zfs/vdev_raidz_math_powerpc_altivec_common.h
+++ b/module/zfs/vdev_raidz_math_powerpc_altivec_common.h
@@ -26,10 +26,6 @@
 #include <sys/types.h>
 #include <sys/simd.h>
 
-#ifdef __linux__
-#define	__asm __asm__ __volatile__
-#endif
-
 #define	_REG_CNT(_0, _1, _2, _3, _4, _5, _6, _7, N, ...) N
 #define	REG_CNT(r...) _REG_CNT(r, 8, 7, 6, 5, 4, 3, 2, 1)
 
@@ -142,7 +138,7 @@ typedef struct v {
 {								\
 	switch (REG_CNT(r)) {					\
 	case 8:							\
-		__asm(						\
+		__asm__ __volatile__(				\
 		"lvx 21,0,%[SRC0]\n"				\
 		"lvx 20,0,%[SRC1]\n"				\
 		"lvx 19,0,%[SRC2]\n"				\
@@ -172,7 +168,7 @@ typedef struct v {
 		:	"v18", "v19", "v20", "v21");		\
 		break;						\
 	case 4:							\
-		__asm(						\
+		__asm__ __volatile__(				\
 		"lvx 21,0,%[SRC0]\n"				\
 		"lvx 20,0,%[SRC1]\n"				\
 		"lvx 19,0,%[SRC2]\n"				\
@@ -189,7 +185,7 @@ typedef struct v {
 		:	"v18", "v19", "v20", "v21");		\
 		break;						\
 	case 2:							\
-		__asm(						\
+		__asm__ __volatile__(				\
 		"lvx 21,0,%[SRC0]\n"				\
 		"lvx 20,0,%[SRC1]\n"				\
 		"vxor " VR0(r) "," VR0(r) ",21\n"		\
@@ -208,7 +204,7 @@ typedef struct v {
 {								\
 	switch (REG_CNT(r)) {					\
 	case 8:							\
-		__asm(						\
+		__asm__ __volatile__(				\
 		"vxor " VR4(r) "," VR4(r) "," VR0(r) "\n"	\
 		"vxor " VR5(r) "," VR5(r) "," VR1(r) "\n"	\
 		"vxor " VR6(r) "," VR6(r) "," VR2(r) "\n"	\
@@ -217,7 +213,7 @@ typedef struct v {
 		:	RVR0(r), RVR1(r), RVR2(r), RVR3(r));	\
 		break;						\
 	case 4:							\
-		__asm(						\
+		__asm__ __volatile__(				\
 		"vxor " VR2(r) "," VR2(r) "," VR0(r) "\n"	\
 		"vxor " VR3(r) "," VR3(r) "," VR1(r) "\n"	\
 		:	UVR2(r), UVR3(r)			\
@@ -232,7 +228,7 @@ typedef struct v {
 {								\
 	switch (REG_CNT(r)) {					\
 	case 8:							\
-		__asm(						\
+		__asm__ __volatile__(				\
 		"vxor " VR0(r) "," VR0(r) "," VR0(r) "\n"	\
 		"vxor " VR1(r) "," VR1(r) "," VR1(r) "\n"	\
 		"vxor " VR2(r) "," VR2(r) "," VR2(r) "\n"	\
@@ -245,7 +241,7 @@ typedef struct v {
 			WVR4(r), WVR5(r), WVR6(r), WVR7(r));	\
 		break;						\
 	case 4:							\
-		__asm(						\
+		__asm__ __volatile__(				\
 		"vxor " VR0(r) "," VR0(r) "," VR0(r) "\n"	\
 		"vxor " VR1(r) "," VR1(r) "," VR1(r) "\n"	\
 		"vxor " VR2(r) "," VR2(r) "," VR2(r) "\n"	\
@@ -253,7 +249,7 @@ typedef struct v {
 		:	WVR0(r), WVR1(r), WVR2(r), WVR3(r));	\
 		break;						\
 	case 2:							\
-		__asm(						\
+		__asm__ __volatile__(				\
 		"vxor " VR0(r) "," VR0(r) "," VR0(r) "\n"	\
 		"vxor " VR1(r) "," VR1(r) "," VR1(r) "\n"	\
 		:	WVR0(r), WVR1(r));			\
@@ -267,7 +263,7 @@ typedef struct v {
 {								\
 	switch (REG_CNT(r)) {					\
 	case 8:							\
-		__asm(						\
+		__asm__ __volatile__(				\
 		"vor " VR4(r) "," VR0(r) "," VR0(r) "\n"	\
 		"vor " VR5(r) "," VR1(r) "," VR1(r) "\n"	\
 		"vor " VR6(r) "," VR2(r) "," VR2(r) "\n"	\
@@ -276,7 +272,7 @@ typedef struct v {
 		:	RVR0(r), RVR1(r), RVR2(r), RVR3(r));	\
 		break;						\
 	case 4:							\
-		__asm(						\
+		__asm__ __volatile__(				\
 		"vor " VR2(r) "," VR0(r) "," VR0(r) "\n"	\
 		"vor " VR3(r) "," VR1(r) "," VR1(r) "\n"	\
 		:	WVR2(r), WVR3(r)			\
@@ -291,7 +287,7 @@ typedef struct v {
 {								\
 	switch (REG_CNT(r)) {					\
 	case 8:							\
-		__asm(						\
+		__asm__ __volatile__(				\
 		"lvx " VR0(r) " ,0,%[SRC0]\n"			\
 		"lvx " VR1(r) " ,0,%[SRC1]\n"			\
 		"lvx " VR2(r) " ,0,%[SRC2]\n"			\
@@ -312,7 +308,7 @@ typedef struct v {
 		[SRC7] "r" ((OFFSET(src, 112))));		\
 		break;						\
 	case 4:							\
-		__asm(						\
+		__asm__ __volatile__(				\
 		"lvx " VR0(r) " ,0,%[SRC0]\n"			\
 		"lvx " VR1(r) " ,0,%[SRC1]\n"			\
 		"lvx " VR2(r) " ,0,%[SRC2]\n"			\
@@ -324,7 +320,7 @@ typedef struct v {
 		[SRC3] "r" ((OFFSET(src, 48))));		\
 		break;						\
 	case 2:							\
-		__asm(						\
+		__asm__ __volatile__(				\
 		"lvx " VR0(r) " ,0,%[SRC0]\n"			\
 		"lvx " VR1(r) " ,0,%[SRC1]\n"			\
 		:	WVR0(r), WVR1(r)			\
@@ -340,7 +336,7 @@ typedef struct v {
 {								\
 	switch (REG_CNT(r)) {					\
 	case 8:							\
-		__asm(						\
+		__asm__ __volatile__(				\
 		"stvx " VR0(r) " ,0,%[DST0]\n"			\
 		"stvx " VR1(r) " ,0,%[DST1]\n"			\
 		"stvx " VR2(r) " ,0,%[DST2]\n"			\
@@ -362,7 +358,7 @@ typedef struct v {
 		:	"memory");				\
 		break;						\
 	case 4:							\
-		__asm(						\
+		__asm__ __volatile__(				\
 		"stvx " VR0(r) " ,0,%[DST0]\n"			\
 		"stvx " VR1(r) " ,0,%[DST1]\n"			\
 		"stvx " VR2(r) " ,0,%[DST2]\n"			\
@@ -375,7 +371,7 @@ typedef struct v {
 		: "memory");					\
 		break;						\
 	case 2:							\
-		__asm(						\
+		__asm__ __volatile__(				\
 		"stvx " VR0(r) " ,0,%[DST0]\n"			\
 		"stvx " VR1(r) " ,0,%[DST1]\n"			\
 		: :	[DST0] "r" ((OFFSET(dst, 0))),		\
@@ -400,7 +396,7 @@ typedef struct v {
 
 #define	MUL2_SETUP()						\
 {								\
-	__asm(							\
+	__asm__ __volatile__(					\
 		"vspltisb " VR(16) ",14\n"			\
 		"vspltisb " VR(17) ",15\n"			\
 		"vaddubm " VR(16) "," VR(17) "," VR(16) "\n"	\
@@ -412,7 +408,7 @@ typedef struct v {
 {								\
 	switch (REG_CNT(r)) {					\
 	case 4:							\
-		__asm(						\
+		__asm__ __volatile__(				\
 		"vcmpgtsb 19," VR(17) "," VR0(r) "\n"		\
 		"vcmpgtsb 18," VR(17) "," VR1(r) "\n"		\
 		"vcmpgtsb 21," VR(17) "," VR2(r) "\n"		\
@@ -434,7 +430,7 @@ typedef struct v {
 		:	"v18", "v19", "v20", "v21");		\
 		break;						\
 	case 2:							\
-		__asm(						\
+		__asm__ __volatile__(				\
 		"vcmpgtsb 19," VR(17) "," VR0(r) "\n"		\
 		"vcmpgtsb 18," VR(17) "," VR1(r) "\n"		\
 		"vand 19,19," VR(16) "\n"			\
@@ -478,7 +474,7 @@ typedef struct v {
 {								\
 	switch (REG_CNT(r)) {					\
 	case 2:							\
-		__asm(						\
+		__asm__ __volatile__(				\
 		/* lts for upper part */			\
 		"vspltisb 15,15\n"				\
 		"lvx 10,0,%[lt0]\n"				\
